/* grid */

@import (reference) '../core/globals.less';
@import (reference) '../core/mixins.less';

@grid-sizes:                            range(12);
@container-gutter:                      (@highlight-space / 2);

@fixed-width:                           @lg-breakpoint;
@fixed-xl-width:                        @xl-breakpoint;

@row-gap-breakpoints:                   lg md sm xs;
@row-gap-lg:                            15px;
@row-gap:                               (@highlight-space / 2);
@row-gap-md:                            5px;
@row-gap-sm:                            2px;
@row-gap-xs:                            1px;

@static-grids:                          true;
@static-grid-sizes:                     range(50px, 500px, 50); // start, end, step

@custom-grids:                          true;
@custom-grid-sizes:                     5x 7x 8x 9x; // 5x 7x 8x 9x 10x 11x recommended
@custom-static-grid-sizes:              @btn-default, @btn-lg;

& when (@referenceCompiling = false) { // not compiled when reference importing

    .ui-container,.ui-fixed {
        width: 100%; display: block;
        padding-right: @container-gutter; padding-left: @container-gutter;

        &:before,&:after { content: ""; display: table; }
        &:after { clear: both; }
    }
    .ui-fixed { margin-right: auto; margin-left: auto; }
    .ui-no-gutter { padding-right: 0 !important; padding-left: 0 !important; }

    html {
        .ui-row { display: flex; } // safari flex bug
    }

    .ui-ie { // disable flex for IE
        .ui-row {
            & > [class*="ui-col-"]:not(.ui-col-static):not(.ui-col-12) { float: left; }
        }
    }

    .ui-row {
        margin-right: -@row-gap; margin-left: -@row-gap; flex-wrap: wrap;

        &:before,&:after { content: normal !important; } // safari flex bug

        & > [class*="ui-col-"] when (@static-grids = false) { padding: @row-gap; }
        & > [class*="ui-col-"]:not(.ui-col-static) when (@static-grids = true) { padding: @row-gap; }

        &-align {
            &-l { justify-content: start; }
            &-c { justify-content: center; }
            &-r { justify-content: end; }
        }

        &-gap {
            each(@row-gap-breakpoints, {
                @size: ~'row-gap-@{value}';

                &-@{value} {
                    &,&-h { margin-right: -@@size; margin-left: -@@size; }

                    & when (@static-grids = false) {
                        & > [class*="ui-col-"] { padding: @@size; }
                        &-v > [class*="ui-col-"] { padding-top: @@size; padding-bottom: @@size; }
                        &-h > [class*="ui-col-"] { padding-right: @@size; padding-left: @@size; }
                    }
                    & when (@static-grids = true) {
                        & > [class*="ui-col-"]:not(.ui-col-static) { padding: @@size; }
                        &-v > [class*="ui-col-"]:not(.ui-col-static) { padding-top: @@size; padding-bottom: @@size; }
                        &-h > [class*="ui-col-"]:not(.ui-col-static) { padding-right: @@size; padding-left: @@size; }
                    }
                }
            });
        }
    }
    .ui-no-row-gap {
        &,&-h { margin-right: inherit; margin-left: inherit; }

        & when (@static-grids = false) {
            & > [class*="ui-col-"] { padding: 0; }
            &-v > [class*="ui-col-"] { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="ui-col-"] { padding-right: 0; padding-left: 0; }
        }
        & when (@static-grids = true) {
            & > [class*="ui-col-"]:not(.ui-col-static) { padding: 0; }
            &-v > [class*="ui-col-"]:not(.ui-col-static) { padding-top: 0; padding-bottom: 0; }
            &-h > [class*="ui-col-"]:not(.ui-col-static) { padding-right: 0; padding-left: 0; }
        }
    }

    [class*="ui-col-"] {
        min-height: 1px;

        &:before,&:after { content: "" !important; display: table !important; }
        &:after { clear: both !important; }
    }
    [class*="ui-push-"],[class*="ui-pull-"] { position: relative; }

    ._create-cols(@name; @i) {
        @size:  (@i / max(@grid-sizes));

        .ui-col@{name}@{i} { width: percentage(@size); }
        .ui-offset@{name}@{i} { margin-left: percentage(@size); }
        .ui-push@{name}@{i} { left: percentage(@size); }
        .ui-pull@{name}@{i} { right: percentage(@size); }
    };

    each(@grid-sizes, {
        ._create-cols(~'-'; @value);
    });

    ._create-custom-cols(@name; @size) when (@custom-grids = true) {
        @width: ((100 / @size) / 100);
        .ui-col@{name}@{size} { width: percentage(@width); }
    };

    each(@custom-grid-sizes, {
        ._create-custom-cols(~'-'; @value);
    });

    .ui-col-static when (@static-grids = true) {
        width: 100%; display: table; table-layout: fixed;

        & > .ui-row,& > [class*="ui-col-"] { vertical-align: top; display: table-cell; }
        & > .ui-row {
            width: 100%; margin-left: unset; margin-right: unset; table-layout: fixed;

            &:before,&:after { content: "" !important; display: table !important; }
            &:after { clear: both !important; }

            & > [class*="ui-col-"]:not(.ui-col-static):not(.ui-col-12) { float: left; }
        }

    }

    ._create-static-cols(@name; @value) when (@static-grids = true) {
        @number: unit(@value);
        .ui-col@{name}@{number} { width: @value; }
    };

    each(@static-grid-sizes, {
        ._create-static-cols(~'-'; @value);
    });

    ._create-custom-static-cols(@name; @size) when (@custom-grids = true) {
        @number: unit(@size);
        .ui-col@{name}@{number} { width: @size; }
    };

    each(@custom-static-grid-sizes, {
        ._create-custom-static-cols(~'-'; @value);
    });

    @media (@lg-start) {
        .ui-fixed {
            max-width: @fixed-width;

            &-xl { max-width: @fixed-xl-width; }
        }

        .ui-no-gutter-lg { padding-right: 0 !important; padding-left: 0 !important; }
        .ui-offset-lg-0 { margin-left: 0; }

        each(@grid-sizes, {
            ._create-cols(~'-lg-'; @value);
        });

        each(@custom-grid-sizes, {
            ._create-custom-cols(~'-lg-'; @value);
        });

        each(@static-grid-sizes, {
            ._create-static-cols(~'-lg-'; @value);
        });

        each(@custom-static-grid-sizes, {
            ._create-custom-static-cols(~'-lg-'; @value);
        });

    }
    @media (@md-start) and (@md-finish) {
        .ui-no-gutter-md { padding-right: 0 !important; padding-left: 0 !important; }
        .ui-offset-md-0 { margin-left: 0; }

        each(@grid-sizes, {
            ._create-cols(~'-md-'; @value);
        });

        each(@custom-grid-sizes, {
            ._create-custom-cols(~'-md-'; @value);
        });

        each(@static-grid-sizes, {
            ._create-static-cols(~'-md-'; @value);
        });

        each(@custom-static-grid-sizes, {
            ._create-custom-static-cols(~'-md-'; @value);
        });

        .ui-row {
            &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) {
                & > [class*="ui-col-"]:not([class*="ui-col-md-"]):not([class*="ui-col-sm-"]):not([class*="ui-col-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) { width: 100%; clear: both; }
                }
                & > [class*="ui-offset-"]:not([class*="ui-offset-md-"]):not([class*="ui-offset-sm-"]):not([class*="ui-offset-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) { margin-left: 0; }
                }
                & > [class*="ui-push-"]:not([class*="ui-push-md-"]):not([class*="ui-push-sm-"]):not([class*="ui-push-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) { left: 0; }
                }
                & > [class*="ui-pull-"]:not([class*="ui-pull-md-"]):not([class*="ui-pull-sm-"]):not([class*="ui-pull-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) { right: 0; }
                }
            }
        }
        .ui-col-static when (@static-grids = true) {
            &:not(.ui-no-fluid):not(.ui-sm-fluid):not(.ui-xs-fluid) {
                & > .ui-row,& > [class*="ui-col-"] { width: 100%; display: block; }
            }
        }

    }
    @media (@sm-start) and (@sm-finish) {
        .ui-no-gutter {
            &-md,&-sm { padding-right: 0 !important; padding-left: 0 !important; }
        }

        .ui-offset-sm-0 { margin-left: 0; }

        each(@grid-sizes, {
            ._create-cols(~'-sm-'; @value);
        });

        each(@custom-grid-sizes, {
            ._create-custom-cols(~'-sm-'; @value);
        });

        each(@static-grid-sizes, {
            ._create-static-cols(~'-sm-'; @value);
        });

        each(@custom-static-grid-sizes, {
            ._create-custom-static-cols(~'-sm-'; @value);
        });

        .ui-row {
            &.ui-sm-fluid > [class*="ui-col-"] { width: 100%; clear: both; }

            &:not(.ui-no-fluid):not(.ui-xs-fluid) {
                & > [class*="ui-col-"]:not([class*="ui-col-sm-"]):not([class*="ui-col-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-xs-fluid) { width: 100%; clear: both; }
                }
                & > [class*="ui-offset-"]:not([class*="ui-offset-sm-"]):not([class*="ui-offset-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-xs-fluid) { margin-left: 0; }
                }
                & > [class*="ui-push-"]:not([class*="ui-push-sm-"]):not([class*="ui-push-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-xs-fluid) { left: 0; }
                }
                & > [class*="ui-pull-"]:not([class*="ui-pull-sm-"]):not([class*="ui-pull-xs-"]) {
                    &:not(.ui-no-fluid):not(.ui-xs-fluid) { right: 0; }
                }
            }
        }
        .ui-col-static when (@static-grids = true) {
            &:not(.ui-no-fluid):not(.ui-xs-fluid) {
                & > .ui-row,& > [class*="ui-col-"] { width: 100%; display: block; }
            }
        }
    }
    @media (@xs-finish) {
        .ui-no-gutter {
            &-md,&-sm,&-xs { padding-right: 0 !important; padding-left: 0 !important; }
        }

        .ui-container { min-width: @layout-min; }
        .ui-offset-xs-0 { margin-left: 0; }

        each(@grid-sizes, {
            ._create-cols(~'-xs-'; @value);
        });

        each(@custom-grid-sizes, {
            ._create-custom-cols(~'-xs-'; @value);
        });

        each(@static-grid-sizes, {
            ._create-static-cols(~'-xs-'; @value);
        });

        each(@custom-static-grid-sizes, {
            ._create-custom-static-cols(~'-xs-'; @value);
        });

        .ui-row {
            &.ui-xs-fluid > [class*="ui-col-"] { width: 100%; clear: both; }

            &:not(.ui-no-fluid) {
                & > [class*="ui-col-"]:not([class*="ui-col-xs-"]) {
                    &:not(.ui-no-fluid) { width: 100%; clear: both; }
                }
                & > [class*="ui-offset-"]:not([class*="ui-offset-xs-"]) {
                    &:not(.ui-no-fluid) { margin-left: 0; }
                }
                & > [class*="ui-push-"]:not([class*="ui-push-xs-"]) {
                    &:not(.ui-no-fluid) { left: 0; }
                }
                & > [class*="ui-pull-"]:not([class*="ui-pull-xs-"]) {
                    &:not(.ui-no-fluid) { right: 0; }
                }
            }
        }
        .ui-col-static when (@static-grids = true) {
            &:not(.ui-no-fluid) {
                & > .ui-row,& > [class*="ui-col-"] { width: 100%; display: block; }
            }
        }
    }
    @media (@default-finish) {
        .ui-lg-fluid {
            &.ui-row > [class*="ui-col-"],[class*="ui-col-"]& { width: 100%; clear: both; }

            &.ui-col-static when (@static-grids = true) {
                & > .ui-row,& > [class*="ui-col-"] { width: 100%; display: block; }
            }

            [class*="ui-offset-"]& { margin-left: 0; }
            [class*="ui-push-"]& { left: 0; }
            [class*="ui-pull-"]& { right: 0; }
        }
    }
    @media (@lg-finish) {
        .ui-xl-fluid {
            &.ui-row > [class*="ui-col-"],[class*="ui-col-"]& { width: 100%; clear: both; }

            &.ui-col-static when (@static-grids = true) {
                & > .ui-row,& > [class*="ui-col-"] { width: 100%; display: block; }
            }

            [class*="ui-offset-"]& { margin-left: 0; }
            [class*="ui-push-"]& { left: 0; }
            [class*="ui-pull-"]& { right: 0; }
        }
    }
    @media (@xl-start) {
        .ui-no-gutter-xl { padding-right: 0 !important; padding-left: 0 !important; }
        .ui-offset-xl-0 { margin-left: 0; }

        each(@grid-sizes, {
            ._create-cols(~'-xl-'; @value);
        });

        each(@custom-grid-sizes, {
            ._create-custom-cols(~'-xl-'; @value);
        });

        each(@static-grid-sizes, {
            ._create-static-cols(~'-xl-'; @value);
        });

        each(@custom-static-grid-sizes, {
            ._create-custom-static-cols(~'-xl-'; @value);
        });
    }

}